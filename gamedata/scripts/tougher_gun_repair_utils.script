local tgrCfg = tougher_gun_repair_config
isWorkshopOpen = false

function CheckRepairThreshold(itemCondition)
    if not itemCondition then return false end

    return IsBetween(itemCondition,
    tgrCfg.repairing_threshold,
    tgrCfg.repairing_threshold_ceil)
end

function CheckCleanThreshold(itemCondition)
    if not itemCondition then return false end

    return IsBetween(itemCondition,
    tgrCfg.cleaning_threshold,
    tgrCfg.cleaning_threshold_ceil)
end

function IsBetween(num, min, max)
    if not num then return false end
    if not min then return false end
    if not max then return false end
    if num >= min and num <= max then return true end
end

function GetRepairCondToSet(itemCondition)
    if IsPlayerUsingWorkshop() then return clamp(itemCondition + tgrCfg.repairing_charge_restoration, 1, 100) end

    --SERIOUS: Yes I deliberately use tgrCfg.cleaning_threshold as a max value.
    --This way you can't softlock yourself to: Having a 59% part that you can't clean yet, but can't reapir further either.
    return clamp(itemCondition + tgrCfg.repairing_charge_restoration, 1, tgrCfg.cleaning_threshold)
end

function GetCleanCondToSet(itemCondition)
    if IsPlayerUsingWorkshop() then
        return clamp(itemCondition
            + tgrCfg.cleaning_charge_restoration
            + tgrCfg.cleaning_charge_vice_bonus, 1, 100)
    end

    return clamp(itemCondition + tgrCfg.cleaning_charge_restoration, 1, 100)
end

--Vices count too
--This function is pretty redundent atm. We should still keep it. 
--Will make it easier to inject extra logic in the future if need be.
function IsPlayerUsingWorkshop()
    return isWorkshopOpen
end