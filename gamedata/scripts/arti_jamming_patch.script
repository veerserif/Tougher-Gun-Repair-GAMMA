--#region Tougher Gun repairs
-- Add a cleaning threshold variable. TO-DO: make it MCM configurable?
cleaning_threshold = 75
--#endregion

quality_map = {
	[0] = "broken",
	[1] = "damaged",
	[2] = "worn",
	[3] = "dirty",
}

unique_mapping = {
	["prt_w_gas_tube_9"] = "extractor",
	["prt_w_gas_tube_10"] = "extractor",
	["prt_w_gas_tube_8"] = "ejector",
	["prt_w_gas_tube_2"] = "pump",
	["prt_w_bolt_11"] = "hammers",
	["prt_w_bolt_12"] = "hammers",
	["prt_w_bolt_carrier_8"] = "chock",
	["prt_w_bolt_carrier_9"] = "chock",
}

name_mapping = {
	"spring",
	"bolt_carrier",
	"bolt",
	"gas_tube",
	"barrel",
	"trigger"
}

local toolkit_map = {
	["pistol"] 		= {"cleaning_kit_p","toolkit_p"},
	["shotgun"] 	= {"cleaning_kit_s","toolkit_s"},
	["rifle_5"] 	= {"cleaning_kit_r5","toolkit_r5"},
	["rifle_7"] 	= {"cleaning_kit_r7","toolkit_r7"},
}

local string_find         = string.find
local math_ceil           = math.ceil
local math_floor          = math.floor
local gc                  = game.translate_string

has_parts = arti_jamming.has_parts
is_part = arti_jamming.is_part
print_dbg = arti_jamming.print_dbg
print_ws = ui_workshop.print_ws
get_config = a_arti_jamming_mcm.get_config
current_id = arti_jamming.current_id
reset_cgd = arti_jamming.reset_cgd

local clr_r  = utils_xml.get_color("d_red")
local clr_o  = utils_xml.get_color("d_orange")
local clr_y  = utils_xml.get_color("yellow")
local clr_g  = utils_xml.get_color("d_green")
local clr_p  = utils_xml.get_color("d_purple")
local clr_w	 = utils_xml.get_color("d_white")

OldProcessPart = zzzz_arti_jamming_repairs.process_part
zzzz_arti_jamming_repairs.process_part = function(name, condition)
	local severity = condition == -1 and "missing" or math.floor(condition / 20)
	local clr = clr_r
	if condition >= cleaning_threshold then clr = clr_g -- changed to use cleaning_threshold
	elseif condition > 20 then clr = clr_o 
	elseif condition == -1 then clr = clr_r end
	local part_name = ""
	if unique_mapping[name] then
		part_name = unique_mapping[name]
	else
		if not string_find(name, "prt_w") then return "" end
		local i = 1
		while part_name == "" and i < 7 do
			-- print_dbg("it %s, name %s", i, name)
			if string_find(name, name_mapping[i]) then
				part_name = name_mapping[i]
			end
			i = i + 1
		end
	end
	print_dbg("part %s, category %s, sev %s", name, part_name, severity)
	
	if part_name ~= "barrel" then
		return " " .. clr_w .. gc("st_dot") .. " " .. clr .. gc("st_damage_"..severity) .. " " .. gc("st_name_"..part_name) .. "\\n"
	end
	
	condition = condition / 100
	condition = ( 130 - ( 1.12 * condition ) ) * ( condition * 1.12 ) / 100
	condition = tonumber(string.format("%.0f", condition * 100))
	condition = math.min(condition, 100)
	
	return " " .. clr_w .. gc("st_dot") .. " " .. clr .. gc("st_damage_"..severity) .. " " .. gc("st_name_"..part_name) .. clr_w .. " (" .. condition .. "% DMG and AP)" .. "\\n"
end

OldHasSuitableKit = zzzz_arti_jamming_repairs.has_suitable_kit
zzzz_arti_jamming_repairs.has_suitable_kit = function(obj)
	local repair_sec = SYS_GetParam(0, obj:section(), "repair_type") or "none"
	local toolkit_sec = toolkit_map[repair_sec] or "none"
	print_dbg("checking suitability for %s, repair %s", obj:section(), repair_sec)
	local has_clean = db.actor:object(toolkit_sec[1])
	local has_repair = db.actor:object(toolkit_sec[2])
	if not (has_clean or has_repair) then return false end
	local parts = item_parts.get_parts_con(obj)
	local allow = false
	for k,v in pairs(parts) do
		if is_part(k) then
			-- allow for repair. VEER TO-DO: remove this or contrain to "in workshop UI only"
			if has_repair and v < 98 then
				allow = true
			-- allow for clean
			elseif v >= cleaning_threshold and has_clean then -- use cleaning_threshold
				allow = true
			end
		end
	end
	return allow
end